
BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001558  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800172c  0800172c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800172c  0800172c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800172c  0800172c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000074  080017a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080017a8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003680  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f3c  00000000  00000000  00023767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  000246a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000251  00000000  00000000  000249f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021da  00000000  00000000  00024c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c6d  00000000  00000000  00026e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a47  00000000  00000000  00029a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d6c  00000000  00000000  000334d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0003423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080016d4 	.word	0x080016d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080016d4 	.word	0x080016d4

080001d4 <Det_ReportError>:
#include "BIT_MATH.h"

#include "DET.h"

void Det_ReportError(uint8 u8ModuleId, uint8 u8ErrorId, uint8 u8FunctionId)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	while(1);
 80001e6:	e7fe      	b.n	80001e6 <Det_ReportError+0x12>

080001e8 <Bootloader_init>:
uint8 u8col = 0;

void Bootloader_ProcessData();

void Bootloader_init()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	SYSTICK_vidInit();
 80001ec:	f000 ffbc 	bl	8001168 <SYSTICK_vidInit>
	UARTIFinitialize();
 80001f0:	f001 f890 	bl	8001314 <UARTIFinitialize>
	UARTIF_attachcomponentcallback(Bootloader_ProcessData);
 80001f4:	4802      	ldr	r0, [pc, #8]	; (8000200 <Bootloader_init+0x18>)
 80001f6:	f001 f899 	bl	800132c <UARTIF_attachcomponentcallback>
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	08000545 	.word	0x08000545

08000204 <allocateRows>:

void allocateRows(uint8 ***u8data, uint8 rows)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
    *u8data = (uint8 **)calloc(rows,sizeof(uint8 *));
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2104      	movs	r1, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f001 f94f 	bl	80014b8 <calloc>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	601a      	str	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <allocateCols>:

void allocateCols(uint8 **u8data, uint16 cols)
{
 800022c:	b590      	push	{r4, r7, lr}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	460b      	mov	r3, r1
 8000236:	807b      	strh	r3, [r7, #2]
	 if (cols % 2 == 1)
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b29b      	uxth	r3, r3
 8000240:	2b00      	cmp	r3, #0
 8000242:	d002      	beq.n	800024a <allocateCols+0x1e>
	 {
		 cols++;
 8000244:	887b      	ldrh	r3, [r7, #2]
 8000246:	3301      	adds	r3, #1
 8000248:	807b      	strh	r3, [r7, #2]
	 }
	 u8data[u8row] = (uint8 *)calloc(cols,sizeof(uint8));
 800024a:	8878      	ldrh	r0, [r7, #2]
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <allocateCols+0x3c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	18d4      	adds	r4, r2, r3
 8000256:	2101      	movs	r1, #1
 8000258:	f001 f92e 	bl	80014b8 <calloc>
 800025c:	4603      	mov	r3, r0
 800025e:	6023      	str	r3, [r4, #0]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bd90      	pop	{r4, r7, pc}
 8000268:	2000009d 	.word	0x2000009d

0800026c <Bootloader_write>:
	*data = u8data;
}


Std_ReturnType Bootloader_write()
{
 800026c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000270:	b089      	sub	sp, #36	; 0x24
 8000272:	af00      	add	r7, sp, #0
	uint32 u32InitialAddress;
	uint8 EOF = STD_LOW;
 8000274:	2300      	movs	r3, #0
 8000276:	76fb      	strb	r3, [r7, #27]
	uint8 AppID = BL_APP2;
 8000278:	2301      	movs	r3, #1
 800027a:	71fb      	strb	r3, [r7, #7]
	uint8 u8row = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	76bb      	strb	r3, [r7, #26]
	while(1)
	{
 8000280:	466b      	mov	r3, sp
 8000282:	461e      	mov	r6, r3
		if (EOF)
 8000284:	7efb      	ldrb	r3, [r7, #27]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d002      	beq.n	8000290 <Bootloader_write+0x24>
			break;
 800028a:	46b5      	mov	sp, r6
				return E_NOT_OK;
		}
		u8row++;

	}
	return E_OK;
 800028c:	2301      	movs	r3, #1
 800028e:	e0ed      	b.n	800046c <Bootloader_write+0x200>
		uint8 u8recordsize = u8data[u8row][0];
 8000290:	4b79      	ldr	r3, [pc, #484]	; (8000478 <Bootloader_write+0x20c>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	7ebb      	ldrb	r3, [r7, #26]
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	763b      	strb	r3, [r7, #24]
		uint16 offsetAddress = ((uint16)u8data[u8row][1] << 8) + u8data[u8row][2];
 80002a0:	4b75      	ldr	r3, [pc, #468]	; (8000478 <Bootloader_write+0x20c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	7ebb      	ldrb	r3, [r7, #26]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	021b      	lsls	r3, r3, #8
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4b70      	ldr	r3, [pc, #448]	; (8000478 <Bootloader_write+0x20c>)
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	7ebb      	ldrb	r3, [r7, #26]
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	440b      	add	r3, r1
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	3302      	adds	r3, #2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	4413      	add	r3, r2
 80002ca:	82fb      	strh	r3, [r7, #22]
		uint8 u8formatType = u8data[u8row][3];
 80002cc:	4b6a      	ldr	r3, [pc, #424]	; (8000478 <Bootloader_write+0x20c>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	7ebb      	ldrb	r3, [r7, #26]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4413      	add	r3, r2
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	78db      	ldrb	r3, [r3, #3]
 80002da:	757b      	strb	r3, [r7, #21]
		uint16 u16data[u8recordsize/2];
 80002dc:	7e3b      	ldrb	r3, [r7, #24]
 80002de:	085b      	lsrs	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4619      	mov	r1, r3
 80002e4:	1e4b      	subs	r3, r1, #1
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	460a      	mov	r2, r1
 80002ea:	2300      	movs	r3, #0
 80002ec:	4614      	mov	r4, r2
 80002ee:	461d      	mov	r5, r3
 80002f0:	f04f 0200 	mov.w	r2, #0
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	012b      	lsls	r3, r5, #4
 80002fa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80002fe:	0122      	lsls	r2, r4, #4
 8000300:	460a      	mov	r2, r1
 8000302:	2300      	movs	r3, #0
 8000304:	4690      	mov	r8, r2
 8000306:	4699      	mov	r9, r3
 8000308:	f04f 0200 	mov.w	r2, #0
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000314:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000318:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800031c:	460b      	mov	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	3307      	adds	r3, #7
 8000322:	08db      	lsrs	r3, r3, #3
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	ebad 0d03 	sub.w	sp, sp, r3
 800032a:	466b      	mov	r3, sp
 800032c:	3301      	adds	r3, #1
 800032e:	085b      	lsrs	r3, r3, #1
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
		uint8 u8counter = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	767b      	strb	r3, [r7, #25]
		for (; u8counter < u8recordsize; u8counter += 2)
 8000338:	e022      	b.n	8000380 <Bootloader_write+0x114>
			u16data[u8counter/2] = ((uint16)u8data[u8row][4 + u8counter] << 8) + u8data[u8row][5 + u8counter];
 800033a:	4b4f      	ldr	r3, [pc, #316]	; (8000478 <Bootloader_write+0x20c>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	7ebb      	ldrb	r3, [r7, #26]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	7e7a      	ldrb	r2, [r7, #25]
 8000348:	3204      	adds	r2, #4
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b29b      	uxth	r3, r3
 8000350:	021b      	lsls	r3, r3, #8
 8000352:	b29a      	uxth	r2, r3
 8000354:	4b48      	ldr	r3, [pc, #288]	; (8000478 <Bootloader_write+0x20c>)
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	7ebb      	ldrb	r3, [r7, #26]
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	440b      	add	r3, r1
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7e79      	ldrb	r1, [r7, #25]
 8000362:	3105      	adds	r1, #5
 8000364:	440b      	add	r3, r1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b29b      	uxth	r3, r3
 800036a:	7e79      	ldrb	r1, [r7, #25]
 800036c:	0849      	lsrs	r1, r1, #1
 800036e:	b2c9      	uxtb	r1, r1
 8000370:	4413      	add	r3, r2
 8000372:	b29a      	uxth	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		for (; u8counter < u8recordsize; u8counter += 2)
 800037a:	7e7b      	ldrb	r3, [r7, #25]
 800037c:	3302      	adds	r3, #2
 800037e:	767b      	strb	r3, [r7, #25]
 8000380:	7e7a      	ldrb	r2, [r7, #25]
 8000382:	7e3b      	ldrb	r3, [r7, #24]
 8000384:	429a      	cmp	r2, r3
 8000386:	d3d8      	bcc.n	800033a <Bootloader_write+0xce>
		if (u8recordsize % 2 == 1)
 8000388:	7e3b      	ldrb	r3, [r7, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	d010      	beq.n	80003b6 <Bootloader_write+0x14a>
			u16data[u8counter] = ((uint16)u8data[u8row][4 + u8counter - 1] << 8);
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <Bootloader_write+0x20c>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	7ebb      	ldrb	r3, [r7, #26]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	7e7b      	ldrb	r3, [r7, #25]
 80003a2:	3303      	adds	r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	7e7a      	ldrb	r2, [r7, #25]
 80003ac:	021b      	lsls	r3, r3, #8
 80003ae:	b299      	uxth	r1, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		switch(u8formatType)
 80003b6:	7d7b      	ldrb	r3, [r7, #21]
 80003b8:	2b05      	cmp	r3, #5
 80003ba:	d84f      	bhi.n	800045c <Bootloader_write+0x1f0>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <Bootloader_write+0x158>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003dd 	.word	0x080003dd
 80003c8:	080003f7 	.word	0x080003f7
 80003cc:	0800045d 	.word	0x0800045d
 80003d0:	0800045d 	.word	0x0800045d
 80003d4:	080003fd 	.word	0x080003fd
 80003d8:	08000437 	.word	0x08000437
				uint32 u32Address = u32InitialAddress + offsetAddress;
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	69fa      	ldr	r2, [r7, #28]
 80003e0:	4413      	add	r3, r2
 80003e2:	60bb      	str	r3, [r7, #8]
				FLS_WriteSector(AppID, u32Address, u16data, u8recordsize/2);
 80003e4:	79f8      	ldrb	r0, [r7, #7]
 80003e6:	7e3b      	ldrb	r3, [r7, #24]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	68b9      	ldr	r1, [r7, #8]
 80003f0:	f000 fa1a 	bl	8000828 <FLS_WriteSector>
				break;
 80003f4:	e035      	b.n	8000462 <Bootloader_write+0x1f6>
				EOF = STD_HIGH;
 80003f6:	2301      	movs	r3, #1
 80003f8:	76fb      	strb	r3, [r7, #27]
				break;
 80003fa:	e032      	b.n	8000462 <Bootloader_write+0x1f6>
				u32InitialAddress = ((uint32)u16data[0] << 16) ;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	61fb      	str	r3, [r7, #28]
				if(!FLS_GetAddressSectorID(u32InitialAddress + ((uint16)u8data[1][1] << 8), &AppID))
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <Bootloader_write+0x20c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	3304      	adds	r3, #4
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	461a      	mov	r2, r3
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	4413      	add	r3, r2
 8000418:	1dfa      	adds	r2, r7, #7
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fa65 	bl	80008ec <FLS_GetAddressSectorID>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d101      	bne.n	800042c <Bootloader_write+0x1c0>
					AppID = BL_APP2;
 8000428:	2301      	movs	r3, #1
 800042a:	71fb      	strb	r3, [r7, #7]
				FLS_EraseSector(AppID);
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f9ba 	bl	80007a8 <FLS_EraseSector>
				break;
 8000434:	e015      	b.n	8000462 <Bootloader_write+0x1f6>
				jumpAddress = u32InitialAddress + ((uint16)u8data[1][1] << 8) + u8data[1][2];
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <Bootloader_write+0x20c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3304      	adds	r3, #4
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	021b      	lsls	r3, r3, #8
 8000444:	461a      	mov	r2, r3
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	4413      	add	r3, r2
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <Bootloader_write+0x20c>)
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	3204      	adds	r2, #4
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	3202      	adds	r2, #2
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	4413      	add	r3, r2
 8000458:	4a08      	ldr	r2, [pc, #32]	; (800047c <Bootloader_write+0x210>)
 800045a:	6013      	str	r3, [r2, #0]
				return E_NOT_OK;
 800045c:	2300      	movs	r3, #0
 800045e:	46b5      	mov	sp, r6
 8000460:	e004      	b.n	800046c <Bootloader_write+0x200>
		u8row++;
 8000462:	7ebb      	ldrb	r3, [r7, #26]
 8000464:	3301      	adds	r3, #1
 8000466:	76bb      	strb	r3, [r7, #26]
 8000468:	46b5      	mov	sp, r6
	{
 800046a:	e709      	b.n	8000280 <Bootloader_write+0x14>
}
 800046c:	4618      	mov	r0, r3
 800046e:	3724      	adds	r7, #36	; 0x24
 8000470:	46bd      	mov	sp, r7
 8000472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000476:	bf00      	nop
 8000478:	20000098 	.word	0x20000098
 800047c:	20000090 	.word	0x20000090

08000480 <Bootloader_MassErase>:


Std_ReturnType Bootloader_MassErase()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	return FLS_MassErase();
 8000484:	f000 f962 	bl	800074c <FLS_MassErase>
 8000488:	4603      	mov	r3, r0
}
 800048a:	4618      	mov	r0, r3
 800048c:	bd80      	pop	{r7, pc}

0800048e <Bootloader_AppErase>:

Std_ReturnType Bootloader_AppErase(uint8 AppID)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
	if (AppID > BL_APP5)
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b04      	cmp	r3, #4
 800049c:	d901      	bls.n	80004a2 <Bootloader_AppErase+0x14>
	{
		return E_NOT_OK;
 800049e:	2300      	movs	r3, #0
 80004a0:	e004      	b.n	80004ac <Bootloader_AppErase+0x1e>
	}

	return 	FLS_EraseSector(AppID);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f97f 	bl	80007a8 <FLS_EraseSector>
 80004aa:	4603      	mov	r3, r0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <Bootloader_ExcecuteApp>:

void Bootloader_ExcecuteApp()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
	uint32 u32MainStackPointer = *((volatile uint32*)jumpAddress);
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <Bootloader_ExcecuteApp+0x2c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60fb      	str	r3, [r7, #12]
	uint32 u32ResetHandlerAddress = *((volatile uint32*)(jumpAddress + 4));
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <Bootloader_ExcecuteApp+0x2c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3304      	adds	r3, #4
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	60bb      	str	r3, [r7, #8]

	void (*resetHandler_Address)(void) = (void *)u32ResetHandlerAddress;
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	607b      	str	r3, [r7, #4]

	register uint32 __regMainStackPointer     __asm("sp");
	__regMainStackPointer = u32MainStackPointer;
 80004d0:	f8d7 d00c 	ldr.w	sp, [r7, #12]

	resetHandler_Address();
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4798      	blx	r3
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000090 	.word	0x20000090

080004e4 <Bootloader_sendmsg>:


void Bootloader_sendmsg(u8msg msg, uint16 timeoutInMilliSeconds)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	807b      	strh	r3, [r7, #2]
	while(Bootloader_ACKFlag != BL_ACK)
 80004f0:	e006      	b.n	8000500 <Bootloader_sendmsg+0x1c>
	{
		UARTIF_sendData(msg);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 ff3f 	bl	8001376 <UARTIF_sendData>
		SYSTICK_udtSynchMsecondsDelay(timeoutInMilliSeconds);
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fdf4 	bl	80010e8 <SYSTICK_udtSynchMsecondsDelay>
	while(Bootloader_ACKFlag != BL_ACK)
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <Bootloader_sendmsg+0x34>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d1f4      	bne.n	80004f2 <Bootloader_sendmsg+0xe>
	}
	Bootloader_ACKFlag = BL_IDLE;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <Bootloader_sendmsg+0x34>)
 800050a:	2205      	movs	r2, #5
 800050c:	701a      	strb	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000

0800051c <Bootloader_sendack>:

Std_ReturnType Bootloader_sendack()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	UARTIF_sendData((uint8*)"ACK");
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <Bootloader_sendack+0x10>)
 8000522:	f000 ff28 	bl	8001376 <UARTIF_sendData>
	return E_OK;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	bd80      	pop	{r7, pc}
 800052c:	080016ec 	.word	0x080016ec

08000530 <Bootloader_sendnack>:

Std_ReturnType Bootloader_sendnack()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	UARTIF_sendData((uint8*)"NACK");
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <Bootloader_sendnack+0x10>)
 8000536:	f000 ff1e 	bl	8001376 <UARTIF_sendData>
	return E_OK;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	bd80      	pop	{r7, pc}
 8000540:	080016f0 	.word	0x080016f0

08000544 <Bootloader_ProcessData>:

void Bootloader_ProcessData()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint8 u8recievedItem;
	static uint8 u8recievedCmnd;
	static uint16 u16memsize = 0;
	static uint8 u8recordsize;

	if (Bootloader_FlashFlag == BL_FLS_ON)
 800054a:	4b76      	ldr	r3, [pc, #472]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	f040 808a 	bne.w	8000668 <Bootloader_ProcessData+0x124>
	{

		switch(u8recievedCmnd)
 8000554:	4b74      	ldr	r3, [pc, #464]	; (8000728 <Bootloader_ProcessData+0x1e4>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d038      	beq.n	80005ce <Bootloader_ProcessData+0x8a>
 800055c:	2b0a      	cmp	r3, #10
 800055e:	f300 80dc 	bgt.w	800071a <Bootloader_ProcessData+0x1d6>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d002      	beq.n	800056c <Bootloader_ProcessData+0x28>
 8000566:	2b02      	cmp	r3, #2
 8000568:	d019      	beq.n	800059e <Bootloader_ProcessData+0x5a>
				Bootloader_sendack();
				break;

		}
	}
}
 800056a:	e0d6      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				UARTIF_readData(&u8recievedItem);
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fef6 	bl	8001360 <UARTIF_readData>
				u16memsize += u8recievedItem;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	b29a      	uxth	r2, r3
 8000578:	4b6c      	ldr	r3, [pc, #432]	; (800072c <Bootloader_ProcessData+0x1e8>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b6a      	ldr	r3, [pc, #424]	; (800072c <Bootloader_ProcessData+0x1e8>)
 8000582:	801a      	strh	r2, [r3, #0]
				allocateRows(&u8data, u16memsize);
 8000584:	4b69      	ldr	r3, [pc, #420]	; (800072c <Bootloader_ProcessData+0x1e8>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4619      	mov	r1, r3
 800058c:	4868      	ldr	r0, [pc, #416]	; (8000730 <Bootloader_ProcessData+0x1ec>)
 800058e:	f7ff fe39 	bl	8000204 <allocateRows>
				Bootloader_FlashFlag = BL_FLS_OFF;
 8000592:	4b64      	ldr	r3, [pc, #400]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
				Bootloader_sendack();
 8000598:	f7ff ffc0 	bl	800051c <Bootloader_sendack>
				break;
 800059c:	e0bd      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				UARTIF_readData(&u8recievedItem);
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fedd 	bl	8001360 <UARTIF_readData>
				u8recordsize = u8recievedItem + 5;
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	3305      	adds	r3, #5
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b61      	ldr	r3, [pc, #388]	; (8000734 <Bootloader_ProcessData+0x1f0>)
 80005ae:	701a      	strb	r2, [r3, #0]
				allocateCols(u8data, u8recordsize);
 80005b0:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <Bootloader_ProcessData+0x1ec>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a5f      	ldr	r2, [pc, #380]	; (8000734 <Bootloader_ProcessData+0x1f0>)
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	b292      	uxth	r2, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe35 	bl	800022c <allocateCols>
				Bootloader_sendack();
 80005c2:	f7ff ffab 	bl	800051c <Bootloader_sendack>
				Bootloader_FlashFlag = BL_FLS_OFF;
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
				break;
 80005cc:	e0a5      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				UARTIF_readData(&u8recievedItem);
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fec5 	bl	8001360 <UARTIF_readData>
				u8data[u8row][u8cols++] = u8recievedItem ;
 80005d6:	4b56      	ldr	r3, [pc, #344]	; (8000730 <Bootloader_ProcessData+0x1ec>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b57      	ldr	r3, [pc, #348]	; (8000738 <Bootloader_ProcessData+0x1f4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <Bootloader_ProcessData+0x1f8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	b2c8      	uxtb	r0, r1
 80005ec:	4953      	ldr	r1, [pc, #332]	; (800073c <Bootloader_ProcessData+0x1f8>)
 80005ee:	7008      	strb	r0, [r1, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	701a      	strb	r2, [r3, #0]
				if (u8cols >= u8recordsize)
 80005f6:	4b51      	ldr	r3, [pc, #324]	; (800073c <Bootloader_ProcessData+0x1f8>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <Bootloader_ProcessData+0x1f0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d328      	bcc.n	8000654 <Bootloader_ProcessData+0x110>
					u8cols = 0;
 8000602:	4b4e      	ldr	r3, [pc, #312]	; (800073c <Bootloader_ProcessData+0x1f8>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
					uint8 checksum = ~Bootloader_checksum;
 8000608:	4b4d      	ldr	r3, [pc, #308]	; (8000740 <Bootloader_ProcessData+0x1fc>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	43db      	mvns	r3, r3
 800060e:	71fb      	strb	r3, [r7, #7]
					if ((checksum+1) == u8data[u8row][u8recordsize - 1])
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3301      	adds	r3, #1
 8000614:	4a46      	ldr	r2, [pc, #280]	; (8000730 <Bootloader_ProcessData+0x1ec>)
 8000616:	6811      	ldr	r1, [r2, #0]
 8000618:	4a47      	ldr	r2, [pc, #284]	; (8000738 <Bootloader_ProcessData+0x1f4>)
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	440a      	add	r2, r1
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	4a44      	ldr	r2, [pc, #272]	; (8000734 <Bootloader_ProcessData+0x1f0>)
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	3a01      	subs	r2, #1
 8000628:	440a      	add	r2, r1
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	4293      	cmp	r3, r2
 800062e:	d10e      	bne.n	800064e <Bootloader_ProcessData+0x10a>
						u8row++;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <Bootloader_ProcessData+0x1f4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <Bootloader_ProcessData+0x1f4>)
 800063a:	701a      	strb	r2, [r3, #0]
						Bootloader_checksum = 0;
 800063c:	4b40      	ldr	r3, [pc, #256]	; (8000740 <Bootloader_ProcessData+0x1fc>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
						Bootloader_FlashFlag = BL_FLS_OFF;
 8000642:	4b38      	ldr	r3, [pc, #224]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
						Bootloader_sendack();
 8000648:	f7ff ff68 	bl	800051c <Bootloader_sendack>
				break;
 800064c:	e065      	b.n	800071a <Bootloader_ProcessData+0x1d6>
						Bootloader_sendnack();
 800064e:	f7ff ff6f 	bl	8000530 <Bootloader_sendnack>
				break;
 8000652:	e062      	b.n	800071a <Bootloader_ProcessData+0x1d6>
					Bootloader_checksum += u8recievedItem;
 8000654:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <Bootloader_ProcessData+0x1fc>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <Bootloader_ProcessData+0x1fc>)
 8000660:	701a      	strb	r2, [r3, #0]
					Bootloader_sendack();
 8000662:	f7ff ff5b 	bl	800051c <Bootloader_sendack>
				break;
 8000666:	e058      	b.n	800071a <Bootloader_ProcessData+0x1d6>
		UARTIF_readData(&u8recievedItem);
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fe78 	bl	8001360 <UARTIF_readData>
		switch(u8recievedItem >> 4)
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3b01      	subs	r3, #1
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d84e      	bhi.n	800071a <Bootloader_ProcessData+0x1d6>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <Bootloader_ProcessData+0x140>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	080006bd 	.word	0x080006bd
 8000688:	080006c5 	.word	0x080006c5
 800068c:	080006cd 	.word	0x080006cd
 8000690:	08000703 	.word	0x08000703
 8000694:	08000703 	.word	0x08000703
 8000698:	08000703 	.word	0x08000703
 800069c:	08000703 	.word	0x08000703
 80006a0:	080006fd 	.word	0x080006fd
 80006a4:	08000703 	.word	0x08000703
 80006a8:	0800071b 	.word	0x0800071b
 80006ac:	0800071b 	.word	0x0800071b
 80006b0:	0800071b 	.word	0x0800071b
 80006b4:	080006e5 	.word	0x080006e5
 80006b8:	080006f5 	.word	0x080006f5
				Bootloader_ACKFlag = BL_ACK;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <Bootloader_ProcessData+0x200>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
				break;
 80006c2:	e02a      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_ACKFlag = BL_NACK;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <Bootloader_ProcessData+0x200>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	701a      	strb	r2, [r3, #0]
				break;
 80006ca:	e026      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_FlashFlag = BL_FLS_ON;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
				u8recievedCmnd = u8recievedItem & 0x0F;
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <Bootloader_ProcessData+0x1e4>)
 80006dc:	701a      	strb	r2, [r3, #0]
				Bootloader_sendack();
 80006de:	f7ff ff1d 	bl	800051c <Bootloader_sendack>
				break;
 80006e2:	e01a      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_write();
 80006e4:	f7ff fdc2 	bl	800026c <Bootloader_write>
				u16memsize = 0;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <Bootloader_ProcessData+0x1e8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	801a      	strh	r2, [r3, #0]
				Bootloader_sendack();
 80006ee:	f7ff ff15 	bl	800051c <Bootloader_sendack>
				break;
 80006f2:	e012      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_JUMPFlag = STD_ON;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <Bootloader_ProcessData+0x204>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
				break;
 80006fa:	e00e      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_MassErase();
 80006fc:	f7ff fec0 	bl	8000480 <Bootloader_MassErase>
				break;
 8000700:	e00b      	b.n	800071a <Bootloader_ProcessData+0x1d6>
				Bootloader_AppErase(u8recievedItem-4);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	3b04      	subs	r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fec0 	bl	800048e <Bootloader_AppErase>
				Bootloader_FlashFlag = BL_FLS_OFF;
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <Bootloader_ProcessData+0x1e0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				Bootloader_sendack();
 8000714:	f7ff ff02 	bl	800051c <Bootloader_sendack>
				break;
 8000718:	bf00      	nop
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000094 	.word	0x20000094
 8000728:	2000009e 	.word	0x2000009e
 800072c:	200000a0 	.word	0x200000a0
 8000730:	20000098 	.word	0x20000098
 8000734:	200000a2 	.word	0x200000a2
 8000738:	2000009d 	.word	0x2000009d
 800073c:	2000009c 	.word	0x2000009c
 8000740:	20000096 	.word	0x20000096
 8000744:	20000000 	.word	0x20000000
 8000748:	20000095 	.word	0x20000095

0800074c <FLS_MassErase>:

const uint32 SECTORS_ADDRESSES[] = {SECTOR_ADDRESS1, SECTOR_ADDRESS2, SECTOR_ADDRESS3, SECTOR_ADDRESS4, SECTOR_ADDRESS5, SECTOR_ADDRESS6};
const uint32 SECTORS_MAXSIZES[] = {SECTOR1_MAXSIZE1, SECTOR1_MAXSIZE2, SECTOR1_MAXSIZE3, SECTOR1_MAXSIZE4, SECTOR1_MAXSIZE5, SECTOR1_MAXSIZE6};

Std_ReturnType FLS_MassErase(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	// Control Register Unlocking
	FLS->KEYR = KEY1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <FLS_MassErase+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <FLS_MassErase+0x54>)
 8000754:	605a      	str	r2, [r3, #4]
	FLS->KEYR = KEY2;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <FLS_MassErase+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <FLS_MassErase+0x58>)
 800075a:	605a      	str	r2, [r3, #4]

	// Check BSY Flag
	while(FLS->SR.B.BSY == ISBSY);
 800075c:	bf00      	nop
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <FLS_MassErase+0x50>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b01      	cmp	r3, #1
 800076a:	d0f8      	beq.n	800075e <FLS_MassErase+0x12>

	// Activate Mass Erase Bit
	FLS->CR.B.MER = STD_ON;
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <FLS_MassErase+0x50>)
 800076e:	6913      	ldr	r3, [r2, #16]
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6113      	str	r3, [r2, #16]

	// Start Erasing
	FLS->CR.B.STRT = STD_ON;
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <FLS_MassErase+0x50>)
 8000778:	6913      	ldr	r3, [r2, #16]
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	6113      	str	r3, [r2, #16]

	// Wait for the BSY Flag
	while(FLS->SR.B.BSY == ISBSY);
 8000780:	bf00      	nop
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <FLS_MassErase+0x50>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	f3c3 4300 	ubfx	r3, r3, #16, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b01      	cmp	r3, #1
 800078e:	d0f8      	beq.n	8000782 <FLS_MassErase+0x36>

	// Lock Back the Control Register
	//FLS->CR.B.LOCK = STD_HIGH;

	return E_OK;
 8000790:	2301      	movs	r3, #1
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023c00 	.word	0x40023c00
 80007a0:	45670123 	.word	0x45670123
 80007a4:	cdef89ab 	.word	0xcdef89ab

080007a8 <FLS_EraseSector>:

Std_ReturnType FLS_EraseSector(u8flsSectorID u8sectorID)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	// Control Register Unlocking
	FLS->KEYR = KEY1;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <FLS_EraseSector+0x74>)
 80007b4:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <FLS_EraseSector+0x78>)
 80007b6:	605a      	str	r2, [r3, #4]
	FLS->KEYR = KEY2;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <FLS_EraseSector+0x74>)
 80007ba:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <FLS_EraseSector+0x7c>)
 80007bc:	605a      	str	r2, [r3, #4]

	// Check BSY Flag
	while(FLS->SR.B.BSY == ISBSY);
 80007be:	bf00      	nop
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <FLS_EraseSector+0x74>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d0f8      	beq.n	80007c0 <FLS_EraseSector+0x18>

	// Activate Sector Erase Bit
	FLS->CR.B.SER = STD_ON;
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <FLS_EraseSector+0x74>)
 80007d0:	6913      	ldr	r3, [r2, #16]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	6113      	str	r3, [r2, #16]

	// Select Sector to be Erased
	FLS->CR.B.SNB = u8sectorID;
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <FLS_EraseSector+0x74>)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b2d9      	uxtb	r1, r3
 80007e2:	6913      	ldr	r3, [r2, #16]
 80007e4:	f361 03c6 	bfi	r3, r1, #3, #4
 80007e8:	6113      	str	r3, [r2, #16]

	// Start Erasing
	FLS->CR.B.STRT = STD_ON;
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <FLS_EraseSector+0x74>)
 80007ec:	6913      	ldr	r3, [r2, #16]
 80007ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f2:	6113      	str	r3, [r2, #16]

	// Wait for the BSY Flag
	while(FLS->SR.B.BSY == ISBSY);
 80007f4:	bf00      	nop
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <FLS_EraseSector+0x74>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d0f8      	beq.n	80007f6 <FLS_EraseSector+0x4e>

	// Lock Back the Control Register
	FLS->CR.B.LOCK = STD_HIGH;
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <FLS_EraseSector+0x74>)
 8000806:	6913      	ldr	r3, [r2, #16]
 8000808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800080c:	6113      	str	r3, [r2, #16]

	return E_OK;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023c00 	.word	0x40023c00
 8000820:	45670123 	.word	0x45670123
 8000824:	cdef89ab 	.word	0xcdef89ab

08000828 <FLS_WriteSector>:

Std_ReturnType FLS_WriteSector(uint8 u8sectorID, uint32 u32sectorAddress, uint16* u16data, uint8 dataSize)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	4613      	mov	r3, r2
 800083a:	73bb      	strb	r3, [r7, #14]
	Std_ReturnType u8Status = E_NOT_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	75fb      	strb	r3, [r7, #23]
	uint8 u8DataCounter = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	75bb      	strb	r3, [r7, #22]
	if(SECTORS_MAXSIZES[u8sectorID] > dataSize)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	4a25      	ldr	r2, [pc, #148]	; (80008dc <FLS_WriteSector+0xb4>)
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	429a      	cmp	r2, r3
 8000850:	d93c      	bls.n	80008cc <FLS_WriteSector+0xa4>
	{
		// Control Register Unlocking
		FLS->KEYR = KEY1;
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <FLS_WriteSector+0xb8>)
 8000854:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <FLS_WriteSector+0xbc>)
 8000856:	605a      	str	r2, [r3, #4]
		FLS->KEYR = KEY2;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <FLS_WriteSector+0xb8>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <FLS_WriteSector+0xc0>)
 800085c:	605a      	str	r2, [r3, #4]

		// Check BSY Flag
		while(FLS->SR.B.BSY == ISBSY);
 800085e:	bf00      	nop
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <FLS_WriteSector+0xb8>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b01      	cmp	r3, #1
 800086c:	d0f8      	beq.n	8000860 <FLS_WriteSector+0x38>

		// Set Programming Flag
		FLS->CR.B.PG = STD_ON;
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <FLS_WriteSector+0xb8>)
 8000870:	6913      	ldr	r3, [r2, #16]
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6113      	str	r3, [r2, #16]

		// Select Program Parallelism for writing half word
		FLS->CR.B.PSIZE = FLS_PROG_HALFWORD;
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <FLS_WriteSector+0xb8>)
 800087a:	6913      	ldr	r3, [r2, #16]
 800087c:	2101      	movs	r1, #1
 800087e:	f361 2309 	bfi	r3, r1, #8, #2
 8000882:	6113      	str	r3, [r2, #16]

		for(; u8DataCounter < dataSize ; u8DataCounter++)
 8000884:	e017      	b.n	80008b6 <FLS_WriteSector+0x8e>
		{
			uint16 temp = (u16data[u8DataCounter] << 8) + (u16data[u8DataCounter] >> 8);
 8000886:	7dbb      	ldrb	r3, [r7, #22]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	ba5b      	rev16	r3, r3
 8000892:	82bb      	strh	r3, [r7, #20]
			*((uint16*)u32sectorAddress) = temp;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	8aba      	ldrh	r2, [r7, #20]
 8000898:	801a      	strh	r2, [r3, #0]
			u32sectorAddress += 2;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3302      	adds	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]

			// Check BSY Flag
			while(FLS->SR.B.BSY == ISBSY);
 80008a0:	bf00      	nop
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <FLS_WriteSector+0xb8>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d0f8      	beq.n	80008a2 <FLS_WriteSector+0x7a>
		for(; u8DataCounter < dataSize ; u8DataCounter++)
 80008b0:	7dbb      	ldrb	r3, [r7, #22]
 80008b2:	3301      	adds	r3, #1
 80008b4:	75bb      	strb	r3, [r7, #22]
 80008b6:	7dba      	ldrb	r2, [r7, #22]
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d3e3      	bcc.n	8000886 <FLS_WriteSector+0x5e>
		}

		// Lock Back the Control Register
		FLS->CR.B.LOCK = STD_HIGH;
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <FLS_WriteSector+0xb8>)
 80008c0:	6913      	ldr	r3, [r2, #16]
 80008c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c6:	6113      	str	r3, [r2, #16]

		// Change status to ok
		u8Status = E_OK;
 80008c8:	2301      	movs	r3, #1
 80008ca:	75fb      	strb	r3, [r7, #23]

	}

	return u8Status;
 80008cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08001714 	.word	0x08001714
 80008e0:	40023c00 	.word	0x40023c00
 80008e4:	45670123 	.word	0x45670123
 80008e8:	cdef89ab 	.word	0xcdef89ab

080008ec <FLS_GetAddressSectorID>:
	*u32Version = *((uint32*)u32SectorAddress);
	return E_OK;
}

Std_ReturnType FLS_GetAddressSectorID(uint32 u32Address, uint8* SectorID)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	uint8 u8sectorID = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
	for(; u8sectorID < sizeof(SECTORS_ADDRESSES)/sizeof(uint32); u8sectorID++)
 80008fa:	e00e      	b.n	800091a <FLS_GetAddressSectorID+0x2e>
	{
		if (u32Address == SECTORS_ADDRESSES[u8sectorID])
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <FLS_GetAddressSectorID+0x44>)
 8000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d104      	bne.n	8000914 <FLS_GetAddressSectorID+0x28>
		{
			*SectorID = u8sectorID;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	701a      	strb	r2, [r3, #0]
			return E_OK;
 8000910:	2301      	movs	r3, #1
 8000912:	e006      	b.n	8000922 <FLS_GetAddressSectorID+0x36>
	for(; u8sectorID < sizeof(SECTORS_ADDRESSES)/sizeof(uint32); u8sectorID++)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	3301      	adds	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b05      	cmp	r3, #5
 800091e:	d9ed      	bls.n	80008fc <FLS_GetAddressSectorID+0x10>

		}
	}
	return E_NOT_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	080016fc 	.word	0x080016fc

08000934 <GPIO_Init>:


static GPIO_type* GPIOx[3]={GPIOA,GPIOB,GPIOC};

void GPIO_Init (void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
	for(uint8 u8PinsCounter = 0; u8PinsCounter < GPIO_NUMBER_OF_USED_PIN ; u8PinsCounter++)
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	e25e      	b.n	8000dfe <GPIO_Init+0x4ca>
	{
		if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId >= GPIO_UPPER_PINS_NUMBERS)
 8000940:	79fa      	ldrb	r2, [r7, #7]
 8000942:	498e      	ldr	r1, [pc, #568]	; (8000b7c <GPIO_Init+0x248>)
 8000944:	4613      	mov	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	440b      	add	r3, r1
 800094c:	3301      	adds	r3, #1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d904      	bls.n	800095e <GPIO_Init+0x2a>
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000954:	2202      	movs	r2, #2
 8000956:	2102      	movs	r1, #2
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fc3b 	bl	80001d4 <Det_ReportError>

		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800095e:	79fa      	ldrb	r2, [r7, #7]
 8000960:	4986      	ldr	r1, [pc, #536]	; (8000b7c <GPIO_Init+0x248>)
 8000962:	4613      	mov	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	440b      	add	r3, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a84      	ldr	r2, [pc, #528]	; (8000b80 <GPIO_Init+0x24c>)
 8000970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	4880      	ldr	r0, [pc, #512]	; (8000b7c <GPIO_Init+0x248>)
 800097a:	4613      	mov	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	1a9b      	subs	r3, r3, r2
 8000980:	4403      	add	r3, r0
 8000982:	3301      	adds	r3, #1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	461c      	mov	r4, r3
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	4879      	ldr	r0, [pc, #484]	; (8000b7c <GPIO_Init+0x248>)
 8000996:	4613      	mov	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	4403      	add	r3, r0
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	4a77      	ldr	r2, [pc, #476]	; (8000b80 <GPIO_Init+0x24c>)
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	ea01 0204 	and.w	r2, r1, r4
 80009ac:	601a      	str	r2, [r3, #0]
		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtMode) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	4972      	ldr	r1, [pc, #456]	; (8000b7c <GPIO_Init+0x248>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	4a70      	ldr	r2, [pc, #448]	; (8000b80 <GPIO_Init+0x24c>)
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	6819      	ldr	r1, [r3, #0]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	486c      	ldr	r0, [pc, #432]	; (8000b7c <GPIO_Init+0x248>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	1a9b      	subs	r3, r3, r2
 80009d0:	4403      	add	r3, r0
 80009d2:	3302      	adds	r3, #2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461c      	mov	r4, r3
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4868      	ldr	r0, [pc, #416]	; (8000b7c <GPIO_Init+0x248>)
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	4403      	add	r3, r0
 80009e4:	3301      	adds	r3, #1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa04 f303 	lsl.w	r3, r4, r3
 80009ee:	461c      	mov	r4, r3
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	4862      	ldr	r0, [pc, #392]	; (8000b7c <GPIO_Init+0x248>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	4403      	add	r3, r0
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	4a5f      	ldr	r2, [pc, #380]	; (8000b80 <GPIO_Init+0x24c>)
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	ea41 0204 	orr.w	r2, r1, r4
 8000a0a:	601a      	str	r2, [r3, #0]
		if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_OUTPUT)
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	495b      	ldr	r1, [pc, #364]	; (8000b7c <GPIO_Init+0x248>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	3302      	adds	r3, #2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	f040 80b1 	bne.w	8000b84 <GPIO_Init+0x250>
		{
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER &= ~(1u << (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	4955      	ldr	r1, [pc, #340]	; (8000b7c <GPIO_Init+0x248>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	4a53      	ldr	r2, [pc, #332]	; (8000b80 <GPIO_Init+0x24c>)
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	6858      	ldr	r0, [r3, #4]
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	494f      	ldr	r1, [pc, #316]	; (8000b7c <GPIO_Init+0x248>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	3301      	adds	r3, #1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	43d9      	mvns	r1, r3
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4c49      	ldr	r4, [pc, #292]	; (8000b7c <GPIO_Init+0x248>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	4423      	add	r3, r4
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a47      	ldr	r2, [pc, #284]	; (8000b80 <GPIO_Init+0x24c>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	ea00 0201 	and.w	r2, r0, r1
 8000a6c:	605a      	str	r2, [r3, #4]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	4942      	ldr	r1, [pc, #264]	; (8000b7c <GPIO_Init+0x248>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	4a40      	ldr	r2, [pc, #256]	; (8000b80 <GPIO_Init+0x24c>)
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	6859      	ldr	r1, [r3, #4]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	483c      	ldr	r0, [pc, #240]	; (8000b7c <GPIO_Init+0x248>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	4403      	add	r3, r0
 8000a92:	3303      	adds	r3, #3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461c      	mov	r4, r3
						                                                      (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	4838      	ldr	r0, [pc, #224]	; (8000b7c <GPIO_Init+0x248>)
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	4403      	add	r3, r0
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 8000aa8:	fa04 f303 	lsl.w	r3, r4, r3
 8000aac:	461c      	mov	r4, r3
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	4832      	ldr	r0, [pc, #200]	; (8000b7c <GPIO_Init+0x248>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	4403      	add	r3, r0
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <GPIO_Init+0x24c>)
 8000ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac4:	ea41 0204 	orr.w	r2, r1, r4
 8000ac8:	605a      	str	r2, [r3, #4]

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	492b      	ldr	r1, [pc, #172]	; (8000b7c <GPIO_Init+0x248>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	1a9b      	subs	r3, r3, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <GPIO_Init+0x24c>)
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	6899      	ldr	r1, [r3, #8]
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	4825      	ldr	r0, [pc, #148]	; (8000b7c <GPIO_Init+0x248>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	4403      	add	r3, r0
 8000aee:	3301      	adds	r3, #1
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	461c      	mov	r4, r3
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	481e      	ldr	r0, [pc, #120]	; (8000b7c <GPIO_Init+0x248>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	4403      	add	r3, r0
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <GPIO_Init+0x24c>)
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	ea01 0204 	and.w	r2, r1, r4
 8000b18:	609a      	str	r2, [r3, #8]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	4917      	ldr	r1, [pc, #92]	; (8000b7c <GPIO_Init+0x248>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <GPIO_Init+0x24c>)
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	6899      	ldr	r1, [r3, #8]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <GPIO_Init+0x248>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	4403      	add	r3, r0
 8000b3e:	3304      	adds	r3, #4
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461c      	mov	r4, r3
		                        												 ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <GPIO_Init+0x248>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	4403      	add	r3, r0
 8000b50:	3301      	adds	r3, #1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000b56:	fa04 f303 	lsl.w	r3, r4, r3
 8000b5a:	461c      	mov	r4, r3
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <GPIO_Init+0x248>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	4403      	add	r3, r0
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <GPIO_Init+0x24c>)
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	ea41 0204 	orr.w	r2, r1, r4
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	e13e      	b.n	8000df8 <GPIO_Init+0x4c4>
 8000b7a:	bf00      	nop
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000014 	.word	0x20000014
		}
		else if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_INPUT)
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	49a2      	ldr	r1, [pc, #648]	; (8000e10 <GPIO_Init+0x4dc>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	3302      	adds	r3, #2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d157      	bne.n	8000c48 <GPIO_Init+0x314>
		{
			/* !Comment: Setting the input pin state */
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	499d      	ldr	r1, [pc, #628]	; (8000e10 <GPIO_Init+0x4dc>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4a9a      	ldr	r2, [pc, #616]	; (8000e14 <GPIO_Init+0x4e0>)
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	68d9      	ldr	r1, [r3, #12]
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4897      	ldr	r0, [pc, #604]	; (8000e10 <GPIO_Init+0x4dc>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	4403      	add	r3, r0
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	461c      	mov	r4, r3
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	4890      	ldr	r0, [pc, #576]	; (8000e10 <GPIO_Init+0x4dc>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	1a9b      	subs	r3, r3, r2
 8000bd6:	4403      	add	r3, r0
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a8d      	ldr	r2, [pc, #564]	; (8000e14 <GPIO_Init+0x4e0>)
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	ea01 0204 	and.w	r2, r1, r4
 8000be6:	60da      	str	r2, [r3, #12]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	4989      	ldr	r1, [pc, #548]	; (8000e10 <GPIO_Init+0x4dc>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	4a86      	ldr	r2, [pc, #536]	; (8000e14 <GPIO_Init+0x4e0>)
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	68d9      	ldr	r1, [r3, #12]
 8000c00:	79fa      	ldrb	r2, [r7, #7]
 8000c02:	4883      	ldr	r0, [pc, #524]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	4403      	add	r3, r0
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461c      	mov	r4, r3
		                      ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	487e      	ldr	r0, [pc, #504]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	4403      	add	r3, r0
 8000c1e:	3301      	adds	r3, #1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 8000c24:	fa04 f303 	lsl.w	r3, r4, r3
 8000c28:	461c      	mov	r4, r3
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	4878      	ldr	r0, [pc, #480]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	4403      	add	r3, r0
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4a76      	ldr	r2, [pc, #472]	; (8000e14 <GPIO_Init+0x4e0>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	ea41 0204 	orr.w	r2, r1, r4
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	e0d7      	b.n	8000df8 <GPIO_Init+0x4c4>
		}
		else if (GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_AF)
 8000c48:	79fa      	ldrb	r2, [r7, #7]
 8000c4a:	4971      	ldr	r1, [pc, #452]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	1a9b      	subs	r3, r3, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	3302      	adds	r3, #2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	f040 80be 	bne.w	8000dda <GPIO_Init+0x4a6>
		{
			if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId < GPIO_LOWER_PINS_NUMBERS)
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	496b      	ldr	r1, [pc, #428]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d857      	bhi.n	8000d22 <GPIO_Init+0x3ee>
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	4966      	ldr	r1, [pc, #408]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a64      	ldr	r2, [pc, #400]	; (8000e14 <GPIO_Init+0x4e0>)
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	6a19      	ldr	r1, [r3, #32]
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	4860      	ldr	r0, [pc, #384]	; (8000e10 <GPIO_Init+0x4dc>)
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	4403      	add	r3, r0
 8000c96:	3301      	adds	r3, #1
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	461c      	mov	r4, r3
 8000ca6:	79fa      	ldrb	r2, [r7, #7]
 8000ca8:	4859      	ldr	r0, [pc, #356]	; (8000e10 <GPIO_Init+0x4dc>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	4403      	add	r3, r0
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4a57      	ldr	r2, [pc, #348]	; (8000e14 <GPIO_Init+0x4e0>)
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	ea01 0204 	and.w	r2, r1, r4
 8000cc0:	621a      	str	r2, [r3, #32]
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	4952      	ldr	r1, [pc, #328]	; (8000e10 <GPIO_Init+0x4dc>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <GPIO_Init+0x4e0>)
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	6a19      	ldr	r1, [r3, #32]
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	484c      	ldr	r0, [pc, #304]	; (8000e10 <GPIO_Init+0x4dc>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	4403      	add	r3, r0
 8000ce6:	3306      	adds	r3, #6
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461c      	mov	r4, r3
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	4848      	ldr	r0, [pc, #288]	; (8000e10 <GPIO_Init+0x4dc>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	4403      	add	r3, r0
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa04 f303 	lsl.w	r3, r4, r3
 8000d02:	461c      	mov	r4, r3
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	4842      	ldr	r0, [pc, #264]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	4403      	add	r3, r0
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <GPIO_Init+0x4e0>)
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	ea41 0204 	orr.w	r2, r1, r4
 8000d1e:	621a      	str	r2, [r3, #32]
 8000d20:	e06a      	b.n	8000df8 <GPIO_Init+0x4c4>
			}
			else
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	493a      	ldr	r1, [pc, #232]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <GPIO_Init+0x4e0>)
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4403      	add	r3, r0
 8000d46:	3301      	adds	r3, #1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	461c      	mov	r4, r3
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	482c      	ldr	r0, [pc, #176]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	4403      	add	r3, r0
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a2a      	ldr	r2, [pc, #168]	; (8000e14 <GPIO_Init+0x4e0>)
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	ea01 0204 	and.w	r2, r1, r4
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	4925      	ldr	r1, [pc, #148]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <GPIO_Init+0x4e0>)
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <GPIO_Init+0x4dc>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	4403      	add	r3, r0
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461c      	mov	r4, r3
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <GPIO_Init+0x4dc>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	4403      	add	r3, r0
 8000dac:	3301      	adds	r3, #1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa04 f303 	lsl.w	r3, r4, r3
 8000dba:	461c      	mov	r4, r3
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <GPIO_Init+0x4dc>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	4403      	add	r3, r0
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <GPIO_Init+0x4e0>)
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	ea41 0204 	orr.w	r2, r1, r4
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8000dd8:	e00e      	b.n	8000df8 <GPIO_Init+0x4c4>
			}
		}
		else if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_ANALOG)
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <GPIO_Init+0x4dc>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	3302      	adds	r3, #2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d004      	beq.n	8000df8 <GPIO_Init+0x4c4>
		{
			// Nothing will be added it
		}
		else
		{
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000dee:	2202      	movs	r2, #2
 8000df0:	2102      	movs	r1, #2
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff f9ee 	bl	80001d4 <Det_ReportError>
	for(uint8 u8PinsCounter = 0; u8PinsCounter < GPIO_NUMBER_OF_USED_PIN ; u8PinsCounter++)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f67f ad9d 	bls.w	8000940 <GPIO_Init+0xc>
		}
	}
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000014 	.word	0x20000014

08000e18 <NVIC_udtEnableInterrupt>:

	return udtRetVal;
}

Std_ReturnType NVIC_udtEnableInterrupt (uint8 u8PerIndex)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]

	if(u8PerIndex > 84)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b54      	cmp	r3, #84	; 0x54
 8000e2a:	d80d      	bhi.n	8000e48 <NVIC_udtEnableInterrupt+0x30>
		Det_ReportError(NVIC_MODULE_ID, NVIC_UDT_ENABLE_INTERRUPT, NVIC_INVALID_PERIPHERAL_ID);
#endif
	}
	else
	{
		NVIC -> ISER[u8PerIndex / 32] = (1 << (u8PerIndex % 32));
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f103 	lsl.w	r1, r2, r3
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <NVIC_udtEnableInterrupt+0x40>)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		udtRetVal = E_OK;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
	}

	return udtRetVal;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <NVIC_udtDisableInterrupt>:

Std_ReturnType NVIC_udtDisableInterrupt (uint8 u8PerIndex)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]

	if(u8PerIndex > 84)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b54      	cmp	r3, #84	; 0x54
 8000e6e:	d80e      	bhi.n	8000e8e <NVIC_udtDisableInterrupt+0x32>
		Det_ReportError(NVIC_MODULE_ID, NVIC_UDT_DISABLE_INTERRUPT, NVIC_INVALID_PERIPHERAL_ID);
#endif
	}
	else
	{
		NVIC -> ICER[u8PerIndex / 32] = (1 << (u8PerIndex % 32));
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2201      	movs	r2, #1
 8000e78:	fa02 f103 	lsl.w	r1, r2, r3
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <NVIC_udtDisableInterrupt+0x40>)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3320      	adds	r3, #32
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		udtRetVal = E_OK;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
	}

	return udtRetVal;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <RCC_SelectHSEOSC>:

	return udtReturnValue;
}

Std_ReturnType RCC_SelectHSEOSC()
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	Std_ReturnType udtReturnValue = E_NOT_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	//Enable HSE
	RCC->CR.B.HSEON = STD_HIGH;
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000eac:	6813      	ldr	r3, [r2, #0]
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
	RCC->CR.B.HSION = STD_LOW;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	f36f 0300 	bfc	r3, #0, #1
 8000ebc:	6013      	str	r3, [r2, #0]
	RCC->CR.B.PLLON = STD_LOW;
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f36f 6318 	bfc	r3, #24, #1
 8000ec6:	6013      	str	r3, [r2, #0]

	//Select OSC circuit
	RCC->CR.B.HSEBYP = STD_HIGH;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]

	//Select HSE

	RCC->CFGR.B.SW0 = STD_HIGH;
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6093      	str	r3, [r2, #8]
	RCC->CFGR.B.SW1 = STD_LOW;
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000ede:	6893      	ldr	r3, [r2, #8]
 8000ee0:	f36f 0341 	bfc	r3, #1, #1
 8000ee4:	6093      	str	r3, [r2, #8]


	//Wait till clock is stable
	while(RCC->CR.B.HSERDY == 0);
 8000ee6:	bf00      	nop
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <RCC_SelectHSEOSC+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f8      	beq.n	8000ee8 <RCC_SelectHSEOSC+0x48>
	udtReturnValue = E_OK;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]

	return udtReturnValue;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40023800 	.word	0x40023800

08000f0c <RCC_udtInitSystemClock>:
	return udtReturnValue;
}
#endif

Std_ReturnType RCC_udtInitSystemClock        (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
	Std_ReturnType udtReturnValue = E_NOT_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if RCC_CLOCK_SELECTION  == RCC_HSI
	udtReturnValue = RCC_SelectHSI();
#elif RCC_CLOCK_SELECTION == RCC_HSE_RC
	udtReturnValue = RCC_SelectHSERC();
#elif RCC_CLOCK_SELECTION == RCC_HSE_CRYSTAL
	udtReturnValue = RCC_SelectHSEOSC();
 8000f16:	f7ff ffc3 	bl	8000ea0 <RCC_SelectHSEOSC>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
#elif RCC_CLOCK_SELECTION == RCC_PLL
	udtReturnValue = RCC_SelectPLL();
#else
	#error "Invalid clock selection"
#endif
	return udtReturnValue;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <RCC_udtDeinitSystemClock>:


Std_ReturnType RCC_udtDeinitSystemClock		(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	RCC->CR.B.HSION = STD_ON;
 8000f2c:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]

	while(RCC->CR.B.HSIRDY == STD_LOW);
 8000f36:	bf00      	nop
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f8      	beq.n	8000f38 <RCC_udtDeinitSystemClock+0x10>

	RCC->CFGR.R = 0x0;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]

	while(RCC->CFGR.B.SWS != 0x0);
 8000f4c:	bf00      	nop
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f8      	bne.n	8000f4e <RCC_udtDeinitSystemClock+0x26>

	RCC->CR.B.HSEON = STD_OFF;
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f5e:	6813      	ldr	r3, [r2, #0]
 8000f60:	f36f 4310 	bfc	r3, #16, #1
 8000f64:	6013      	str	r3, [r2, #0]
	RCC->CR.B.HSEBYP = STD_OFF;
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f68:	6813      	ldr	r3, [r2, #0]
 8000f6a:	f36f 4392 	bfc	r3, #18, #1
 8000f6e:	6013      	str	r3, [r2, #0]
	RCC->CR.B.CSSON = STD_OFF;
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f36f 43d3 	bfc	r3, #19, #1
 8000f78:	6013      	str	r3, [r2, #0]

	while(RCC->CR.B.HSERDY != STD_LOW);
 8000f7a:	bf00      	nop
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f8      	bne.n	8000f7c <RCC_udtDeinitSystemClock+0x54>

	RCC->CR.B.PLLON = STD_OFF;
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f36f 6318 	bfc	r3, #24, #1
 8000f92:	6013      	str	r3, [r2, #0]

	while(RCC->CR.B.PLLRDY != STD_LOW);
 8000f94:	bf00      	nop
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f8      	bne.n	8000f96 <RCC_udtDeinitSystemClock+0x6e>

	RCC->PLLCFGR.R = 0x24003010;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <RCC_udtDeinitSystemClock+0x90>)
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <RCC_udtDeinitSystemClock+0x94>)
 8000fa8:	605a      	str	r2, [r3, #4]

	return E_OK;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	24003010 	.word	0x24003010

08000fc0 <RCC_udtEnablePeripheralClock>:

Std_ReturnType RCC_udtEnablePeripheralClock  (uint8 u8BusId, uint8 u8PerId)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType udtReturnValue = E_NOT_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

	if(u8PerId <= RCC_MAX_Registers)
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	2b1f      	cmp	r3, #31
 8000fd8:	d831      	bhi.n	800103e <RCC_udtEnablePeripheralClock+0x7e>
	{
		switch(u8BusId)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d020      	beq.n	8001022 <RCC_udtEnablePeripheralClock+0x62>
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	dc2b      	bgt.n	800103c <RCC_udtEnablePeripheralClock+0x7c>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d002      	beq.n	8000fee <RCC_udtEnablePeripheralClock+0x2e>
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d00d      	beq.n	8001008 <RCC_udtEnablePeripheralClock+0x48>

			default   : /* !Comment: Report Error */
			            #if RCC_DET_USED == STD_ON
			            /* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_BUS_ID); */
						#endif
			            break;
 8000fec:	e026      	b.n	800103c <RCC_udtEnablePeripheralClock+0x7c>
			case AHB  : SET_BIT(RCC->AHB1ENR.R, u8PerId);
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
			            udtReturnValue = E_OK;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
			            break;
 8001006:	e01a      	b.n	800103e <RCC_udtEnablePeripheralClock+0x7e>
			case APB1 : SET_BIT(RCC->APB1ENR.R, u8PerId);
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	79ba      	ldrb	r2, [r7, #6]
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 8001018:	430b      	orrs	r3, r1
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
			            udtReturnValue = E_OK;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
			            break;
 8001020:	e00d      	b.n	800103e <RCC_udtEnablePeripheralClock+0x7e>
			case APB2 : SET_BIT(RCC->APB2ENR.R, u8PerId);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	79ba      	ldrb	r2, [r7, #6]
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	4611      	mov	r1, r2
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <RCC_udtEnablePeripheralClock+0x8c>)
 8001032:	430b      	orrs	r3, r1
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
			            udtReturnValue = E_OK;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
			            break;
 800103a:	e000      	b.n	800103e <RCC_udtEnablePeripheralClock+0x7e>
			            break;
 800103c:	bf00      	nop
		#if RCC_DET_USED == STD_ON
		/* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_PERIPHERAL_ID);*/
		#endif

	}
	return udtReturnValue;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800

08001050 <RCC_udtDisablePeripheralClock>:


Std_ReturnType 	RCC_udtDisablePeripheralClock  (uint8 u8BusId, uint8 u8PerId)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType udtReturnValue = E_NOT_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

	if(u8PerId <= RCC_MAX_Registers)
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b1f      	cmp	r3, #31
 8001068:	d834      	bhi.n	80010d4 <RCC_udtDisablePeripheralClock+0x84>
	{
		switch(u8BusId)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d022      	beq.n	80010b6 <RCC_udtDisablePeripheralClock+0x66>
 8001070:	2b03      	cmp	r3, #3
 8001072:	dc2e      	bgt.n	80010d2 <RCC_udtDisablePeripheralClock+0x82>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d002      	beq.n	800107e <RCC_udtDisablePeripheralClock+0x2e>
 8001078:	2b02      	cmp	r3, #2
 800107a:	d00e      	beq.n	800109a <RCC_udtDisablePeripheralClock+0x4a>

			default   : /* !Comment: Report Error */
			            #if RCC_DET_USED == STD_ON
			            /* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_BUS_ID); */
						#endif
			            break;
 800107c:	e029      	b.n	80010d2 <RCC_udtDisablePeripheralClock+0x82>
			case AHB  : CLR_BIT(RCC->AHB1ENR.R, u8PerId);
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	79ba      	ldrb	r2, [r7, #6]
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	43d2      	mvns	r2, r2
 800108c:	4611      	mov	r1, r2
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 8001090:	400b      	ands	r3, r1
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
			            udtReturnValue = E_OK;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
			            break;
 8001098:	e01c      	b.n	80010d4 <RCC_udtDisablePeripheralClock+0x84>
			case APB1 : CLR_BIT(RCC->APB1ENR.R, u8PerId);
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	43d2      	mvns	r2, r2
 80010a8:	4611      	mov	r1, r2
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
			            udtReturnValue = E_OK;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
			            break;
 80010b4:	e00e      	b.n	80010d4 <RCC_udtDisablePeripheralClock+0x84>
			case APB2 : CLR_BIT(RCC->APB2ENR.R, u8PerId);
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	43d2      	mvns	r2, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <RCC_udtDisablePeripheralClock+0x94>)
 80010c8:	400b      	ands	r3, r1
 80010ca:	6453      	str	r3, [r2, #68]	; 0x44
			            udtReturnValue = E_OK;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
			            break;
 80010d0:	e000      	b.n	80010d4 <RCC_udtDisablePeripheralClock+0x84>
			            break;
 80010d2:	bf00      	nop
		/* !Comment: Report Error */
		#if RCC_DET_USED == STD_ON
		/* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_PERIPHERAL_ID);*/
		#endif
	}
	return udtReturnValue ;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <SYSTICK_udtSynchMsecondsDelay>:
		
	return udtRetVal;	
}

Std_ReturnType SYSTICK_udtSynchMsecondsDelay (uint16 u16Mseconds)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType udtRetVal = E_NOT_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
	if (SYSTICK_CLOCK_FREQ/1000 >= SYSTICK_MAX_CLOCK)
		return E_NOT_OK;

	if(SYSTICK_u8IsInitialized == SYSTICK_INIT)
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <SYSTICK_udtSynchMsecondsDelay+0x78>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d129      	bne.n	8001152 <SYSTICK_udtSynchMsecondsDelay+0x6a>
	{
		udtRetVal = E_OK;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]

		/* !Comment: A write of any value clears the field to 0,
         *          	and also clears the COUNTFLAG bit in the STK_CTRL register to 0.
	     */
	    SYSTICK -> VAL.R  = 0u;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	    SYSTICK -> LOAD.R = 0u;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]

	    uint16 u16LocalCounter = 0u;
 800110e:	2300      	movs	r3, #0
 8001110:	81bb      	strh	r3, [r7, #12]

	    for(u16LocalCounter = 0u; u16LocalCounter < u16Mseconds; u16LocalCounter++)
 8001112:	2300      	movs	r3, #0
 8001114:	81bb      	strh	r3, [r7, #12]
 8001116:	e018      	b.n	800114a <SYSTICK_udtSynchMsecondsDelay+0x62>
	    {
	    	/* !Comment: load 1 mili sec */
	    	SYSTICK -> LOAD.R = SYSTICK_CLOCK_FREQ/1000;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 800111a:	f640 4235 	movw	r2, #3125	; 0xc35
 800111e:	605a      	str	r2, [r3, #4]

	    	/* !Comment: Enable the systick */
	    	SYSTICK -> CTRL.B.ENABLE = STD_ON;
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6013      	str	r3, [r2, #0]

	    	/* !Comment: Wait for count flag */
	    	while(SYSTICK -> CTRL.B.COUNTFLAG == 0u);
 800112a:	bf00      	nop
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f8      	beq.n	800112c <SYSTICK_udtSynchMsecondsDelay+0x44>

	    	/* !Comment: clear count flag */
	    	SYSTICK -> CTRL.B.COUNTFLAG = STD_OFF;
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	f36f 4310 	bfc	r3, #16, #1
 8001142:	6013      	str	r3, [r2, #0]
	    for(u16LocalCounter = 0u; u16LocalCounter < u16Mseconds; u16LocalCounter++)
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	81bb      	strh	r3, [r7, #12]
 800114a:	89ba      	ldrh	r2, [r7, #12]
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3e2      	bcc.n	8001118 <SYSTICK_udtSynchMsecondsDelay+0x30>
		}
	}
	    return udtRetVal;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000020 	.word	0x20000020
 8001164:	e000e010 	.word	0xe000e010

08001168 <SYSTICK_vidInit>:
		
	return udtRetVal;	
}

void SYSTICK_vidInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	SYSTICK_u8IsInitialized = SYSTICK_INIT;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SYSTICK_vidInit+0x20>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
	
#if SYSTICK_CLOCK_SOURCE == SYSTICK_AHB
	SYSTICK -> CTRL.B.CLKSOURCE = 1u;
	
#elif SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8
	SYSTICK -> CTRL.B.CLKSOURCE = 0u; 
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <SYSTICK_vidInit+0x24>)
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	f36f 0382 	bfc	r3, #2, #1
 800117a:	6013      	str	r3, [r2, #0]
	
#else
	#error "Invalid clock source selection!!"

#endif
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000020 	.word	0x20000020
 800118c:	e000e010 	.word	0xe000e010

08001190 <SysTick_Handler>:
	
	return udtRetVal;
}

void SysTick_Handler (void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	static uint16 u16Counter = 1u;

    if(u16Counter == SYSTICK_u16GlobalSeconds)
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <SysTick_Handler+0x4c>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <SysTick_Handler+0x50>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	429a      	cmp	r2, r3
 80011a0:	d114      	bne.n	80011cc <SysTick_Handler+0x3c>
	{
		SYSTICK_pvCallBack();
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <SysTick_Handler+0x54>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4798      	blx	r3
		u16Counter = 1u;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SysTick_Handler+0x4c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	801a      	strh	r2, [r3, #0]
		
		if(SYSTICK_u8SingleIndicator == 1u)
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <SysTick_Handler+0x58>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10f      	bne.n	80011d8 <SysTick_Handler+0x48>
		{
			SYSTICK -> VAL.R  = 0u;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <SysTick_Handler+0x5c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
		    SYSTICK -> LOAD.R = 0u;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SysTick_Handler+0x5c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
		    SYSTICK -> CTRL.R = 0u;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SysTick_Handler+0x5c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
	}
    else
	{
		u16Counter++;
	}		
}
 80011ca:	e005      	b.n	80011d8 <SysTick_Handler+0x48>
		u16Counter++;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <SysTick_Handler+0x4c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b01      	ldr	r3, [pc, #4]	; (80011dc <SysTick_Handler+0x4c>)
 80011d6:	801a      	strh	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000022 	.word	0x20000022
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	200000a4 	.word	0x200000a4
 80011e8:	200000aa 	.word	0x200000aa
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <UART_init>:
void (*USART_pvCallBack) (void);
//uint8 receivedData[162][21]={0};
//uint8 c = 0;
//uint8 u = 0;
void UART_init()
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

//	double baudRate = UART_FREQUENCY_CLOCK/(16.0 * BAUDRATE);
//	double diff = (baudRate - (int)baudRate)*16.0;
//	uint8 div = ((diff - (int)(diff)) >= 0.5) ? (int)(diff) + 1 : (int)(diff);

	UART->BRR.B.DIV_Mantissa = 0xD;//(div >= 16) ? ((short)baudRate) + 1 : (short)baudRate;
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <UART_init+0x50>)
 80011f6:	6893      	ldr	r3, [r2, #8]
 80011f8:	210d      	movs	r1, #13
 80011fa:	f361 130f 	bfi	r3, r1, #4, #12
 80011fe:	6093      	str	r3, [r2, #8]
	UART->BRR.B.DIV_Fraction = 0x9;//div;
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <UART_init+0x50>)
 8001202:	6893      	ldr	r3, [r2, #8]
 8001204:	2109      	movs	r1, #9
 8001206:	f361 0303 	bfi	r3, r1, #0, #4
 800120a:	6093      	str	r3, [r2, #8]
	UART->CR1.B.UE = STD_ON;
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <UART_init+0x50>)
 800120e:	68d3      	ldr	r3, [r2, #12]
 8001210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001214:	60d3      	str	r3, [r2, #12]
	UART->CR1.B.TE = STD_ON;
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <UART_init+0x50>)
 8001218:	68d3      	ldr	r3, [r2, #12]
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	60d3      	str	r3, [r2, #12]
	UART->CR1.B.RE = STD_ON;
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <UART_init+0x50>)
 8001222:	68d3      	ldr	r3, [r2, #12]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	60d3      	str	r3, [r2, #12]
	UART->CR1.B.RXNEIE = STD_ON;
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <UART_init+0x50>)
 800122c:	68d3      	ldr	r3, [r2, #12]
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	60d3      	str	r3, [r2, #12]

}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40011000 	.word	0x40011000

08001244 <UART_udtReceiveINT>:
	}
	UART->SR.B.RXNE = 0;
}

void UART_udtReceiveINT (uint8* pu8ReceivedData)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	*pu8ReceivedData = UART->DR;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <UART_udtReceiveINT+0x20>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40011000 	.word	0x40011000

08001268 <UART_udtTransmitByte>:

void UART_udtTransmitByte(uint8 u8Data)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	UART -> DR = u8Data;
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <UART_udtTransmitByte+0x38>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	6053      	str	r3, [r2, #4]
    while(UART->SR.B.TXE == 0);
 8001278:	bf00      	nop
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <UART_udtTransmitByte+0x38>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f8      	beq.n	800127a <UART_udtTransmitByte+0x12>
    UART->SR.B.TXE = 0;
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <UART_udtTransmitByte+0x38>)
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	f36f 13c7 	bfc	r3, #7, #1
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40011000 	.word	0x40011000

080012a4 <UART_udtTransmit>:

Std_ReturnType UART_udtTransmit (uint8* pu8Data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	Std_ReturnType udtRetVal = E_NOT_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73bb      	strb	r3, [r7, #14]

	uint8 u8LocalCounter = 0u;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]

	while(pu8Data[u8LocalCounter] != '\0')
 80012b4:	e009      	b.n	80012ca <UART_udtTransmit+0x26>
	{
		UART_udtTransmitByte(pu8Data[u8LocalCounter++]);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	73fa      	strb	r2, [r7, #15]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffcf 	bl	8001268 <UART_udtTransmitByte>
	while(pu8Data[u8LocalCounter] != '\0')
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ef      	bne.n	80012b6 <UART_udtTransmit+0x12>
	}

	return udtRetVal;
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <USART1_setIRQHandler>:

void USART1_setIRQHandler(void (*pvcallback) (void))
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	USART_pvCallBack = pvcallback;
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <USART1_setIRQHandler+0x1c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200000ac 	.word	0x200000ac

08001300 <USART1_IRQHandler>:

void USART1_IRQHandler()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
//		receivedData[u][c] = '\0';
//		c = 0;
//		u++;
//		UART_udtTransmit((uint8 *)"ACK");
//	}
	USART_pvCallBack();
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <USART1_IRQHandler+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4798      	blx	r3
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000ac 	.word	0x200000ac

08001314 <UARTIFinitialize>:
void (*UARTIF_pvCallBack) (void);

void UARTIF_passIRQ();

void UARTIFinitialize()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	UART_init();
 8001318:	f7ff ff6a 	bl	80011f0 <UART_init>
	USART1_setIRQHandler(UARTIF_passIRQ);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <UARTIFinitialize+0x14>)
 800131e:	f7ff ffdf 	bl	80012e0 <USART1_setIRQHandler>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800134d 	.word	0x0800134d

0800132c <UARTIF_attachcomponentcallback>:

void UARTIF_attachcomponentcallback(void (*pvcallback) (void))
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	UARTIF_pvCallBack = pvcallback;
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <UARTIF_attachcomponentcallback+0x1c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200000b0 	.word	0x200000b0

0800134c <UARTIF_passIRQ>:

void UARTIF_passIRQ()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	UARTIF_pvCallBack();
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <UARTIF_passIRQ+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4798      	blx	r3
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000b0 	.word	0x200000b0

08001360 <UARTIF_readData>:

void UARTIF_readData(uint8* u8recievedData)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	UART_udtReceiveINT(u8recievedData);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff6b 	bl	8001244 <UART_udtReceiveINT>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <UARTIF_sendData>:

void UARTIF_sendData(uint8* u8dataSent)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	UART_udtTransmit(u8dataSent);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff90 	bl	80012a4 <UART_udtTransmit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <main>:
#include "NVIC_interface.h"



int main()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	// Choose RCC clock and Initialize
	RCC_udtInitSystemClock();
 8001390:	f7ff fdbc 	bl	8000f0c <RCC_udtInitSystemClock>

	// Enable GPIOA peripheral
	RCC_udtEnablePeripheralClock(AHB, 0);
 8001394:	2100      	movs	r1, #0
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fe12 	bl	8000fc0 <RCC_udtEnablePeripheralClock>

	// Initialize GPIO
	GPIO_Init();
 800139c:	f7ff faca 	bl	8000934 <GPIO_Init>

	// Enable UART Global Interrupt
	NVIC_udtEnableInterrupt(37);
 80013a0:	2025      	movs	r0, #37	; 0x25
 80013a2:	f7ff fd39 	bl	8000e18 <NVIC_udtEnableInterrupt>

	// Enable Clock for UART peripheral
	RCC_udtEnablePeripheralClock(APB2, 4);
 80013a6:	2104      	movs	r1, #4
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff fe09 	bl	8000fc0 <RCC_udtEnablePeripheralClock>

	// Initialize Bootloader
	Bootloader_init();
 80013ae:	f7fe ff1b 	bl	80001e8 <Bootloader_init>

	// Bootloader Send Ready to Host
	Bootloader_sendmsg("RDY", 500);
 80013b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <main+0x64>)
 80013b8:	f7ff f894 	bl	80004e4 <Bootloader_sendmsg>

	while(!Bootloader_JUMPFlag)
 80013bc:	bf00      	nop
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <main+0x68>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0fb      	beq.n	80013be <main+0x32>
	{

	}

	NVIC_udtDisableInterrupt(37);
 80013c6:	2025      	movs	r0, #37	; 0x25
 80013c8:	f7ff fd48 	bl	8000e5c <NVIC_udtDisableInterrupt>

	RCC_udtDisablePeripheralClock(APB2, 4);
 80013cc:	2104      	movs	r1, #4
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fe3e 	bl	8001050 <RCC_udtDisablePeripheralClock>
	RCC_udtDisablePeripheralClock(AHB, 0);
 80013d4:	2100      	movs	r1, #0
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fe3a 	bl	8001050 <RCC_udtDisablePeripheralClock>

	RCC_udtDeinitSystemClock();
 80013dc:	f7ff fda4 	bl	8000f28 <RCC_udtDeinitSystemClock>


	Bootloader_sendack();
 80013e0:	f7ff f89c 	bl	800051c <Bootloader_sendack>
	//Execute APP
	Bootloader_ExcecuteApp();
 80013e4:	f7ff f866 	bl	80004b4 <Bootloader_ExcecuteApp>
 80013e8:	2300      	movs	r3, #0


}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	080016f8 	.word	0x080016f8
 80013f4:	20000095 	.word	0x20000095

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f000 f928 	bl	800167c <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20010000 	.word	0x20010000
 8001458:	00000400 	.word	0x00000400
 800145c:	200000b4 	.word	0x200000b4
 8001460:	20000200 	.word	0x20000200

08001464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001492:	f000 f8f9 	bl	8001688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff ff79 	bl	800138c <main>

0800149a <LoopForever>:

LoopForever:
  b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   r0, =_estack
 800149c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014a8:	08001734 	.word	0x08001734
  ldr r2, =_sbss
 80014ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014b0:	20000200 	.word	0x20000200

080014b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>
	...

080014b8 <calloc>:
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <calloc+0xc>)
 80014ba:	460a      	mov	r2, r1
 80014bc:	4601      	mov	r1, r0
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f000 b802 	b.w	80014c8 <_calloc_r>
 80014c4:	20000070 	.word	0x20000070

080014c8 <_calloc_r>:
 80014c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014ca:	fba1 2402 	umull	r2, r4, r1, r2
 80014ce:	b94c      	cbnz	r4, 80014e4 <_calloc_r+0x1c>
 80014d0:	4611      	mov	r1, r2
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	f000 f82e 	bl	8001534 <_malloc_r>
 80014d8:	9a01      	ldr	r2, [sp, #4]
 80014da:	4605      	mov	r5, r0
 80014dc:	b930      	cbnz	r0, 80014ec <_calloc_r+0x24>
 80014de:	4628      	mov	r0, r5
 80014e0:	b003      	add	sp, #12
 80014e2:	bd30      	pop	{r4, r5, pc}
 80014e4:	220c      	movs	r2, #12
 80014e6:	6002      	str	r2, [r0, #0]
 80014e8:	2500      	movs	r5, #0
 80014ea:	e7f8      	b.n	80014de <_calloc_r+0x16>
 80014ec:	4621      	mov	r1, r4
 80014ee:	f000 f8ad 	bl	800164c <memset>
 80014f2:	e7f4      	b.n	80014de <_calloc_r+0x16>

080014f4 <sbrk_aligned>:
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	4e0e      	ldr	r6, [pc, #56]	; (8001530 <sbrk_aligned+0x3c>)
 80014f8:	460c      	mov	r4, r1
 80014fa:	6831      	ldr	r1, [r6, #0]
 80014fc:	4605      	mov	r5, r0
 80014fe:	b911      	cbnz	r1, 8001506 <sbrk_aligned+0x12>
 8001500:	f000 f8ac 	bl	800165c <_sbrk_r>
 8001504:	6030      	str	r0, [r6, #0]
 8001506:	4621      	mov	r1, r4
 8001508:	4628      	mov	r0, r5
 800150a:	f000 f8a7 	bl	800165c <_sbrk_r>
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	d00a      	beq.n	8001528 <sbrk_aligned+0x34>
 8001512:	1cc4      	adds	r4, r0, #3
 8001514:	f024 0403 	bic.w	r4, r4, #3
 8001518:	42a0      	cmp	r0, r4
 800151a:	d007      	beq.n	800152c <sbrk_aligned+0x38>
 800151c:	1a21      	subs	r1, r4, r0
 800151e:	4628      	mov	r0, r5
 8001520:	f000 f89c 	bl	800165c <_sbrk_r>
 8001524:	3001      	adds	r0, #1
 8001526:	d101      	bne.n	800152c <sbrk_aligned+0x38>
 8001528:	f04f 34ff 	mov.w	r4, #4294967295
 800152c:	4620      	mov	r0, r4
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	200000bc 	.word	0x200000bc

08001534 <_malloc_r>:
 8001534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001538:	1ccd      	adds	r5, r1, #3
 800153a:	f025 0503 	bic.w	r5, r5, #3
 800153e:	3508      	adds	r5, #8
 8001540:	2d0c      	cmp	r5, #12
 8001542:	bf38      	it	cc
 8001544:	250c      	movcc	r5, #12
 8001546:	2d00      	cmp	r5, #0
 8001548:	4607      	mov	r7, r0
 800154a:	db01      	blt.n	8001550 <_malloc_r+0x1c>
 800154c:	42a9      	cmp	r1, r5
 800154e:	d905      	bls.n	800155c <_malloc_r+0x28>
 8001550:	230c      	movs	r3, #12
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	2600      	movs	r6, #0
 8001556:	4630      	mov	r0, r6
 8001558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800155c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001630 <_malloc_r+0xfc>
 8001560:	f000 f868 	bl	8001634 <__malloc_lock>
 8001564:	f8d8 3000 	ldr.w	r3, [r8]
 8001568:	461c      	mov	r4, r3
 800156a:	bb5c      	cbnz	r4, 80015c4 <_malloc_r+0x90>
 800156c:	4629      	mov	r1, r5
 800156e:	4638      	mov	r0, r7
 8001570:	f7ff ffc0 	bl	80014f4 <sbrk_aligned>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	4604      	mov	r4, r0
 8001578:	d155      	bne.n	8001626 <_malloc_r+0xf2>
 800157a:	f8d8 4000 	ldr.w	r4, [r8]
 800157e:	4626      	mov	r6, r4
 8001580:	2e00      	cmp	r6, #0
 8001582:	d145      	bne.n	8001610 <_malloc_r+0xdc>
 8001584:	2c00      	cmp	r4, #0
 8001586:	d048      	beq.n	800161a <_malloc_r+0xe6>
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	4631      	mov	r1, r6
 800158c:	4638      	mov	r0, r7
 800158e:	eb04 0903 	add.w	r9, r4, r3
 8001592:	f000 f863 	bl	800165c <_sbrk_r>
 8001596:	4581      	cmp	r9, r0
 8001598:	d13f      	bne.n	800161a <_malloc_r+0xe6>
 800159a:	6821      	ldr	r1, [r4, #0]
 800159c:	1a6d      	subs	r5, r5, r1
 800159e:	4629      	mov	r1, r5
 80015a0:	4638      	mov	r0, r7
 80015a2:	f7ff ffa7 	bl	80014f4 <sbrk_aligned>
 80015a6:	3001      	adds	r0, #1
 80015a8:	d037      	beq.n	800161a <_malloc_r+0xe6>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	442b      	add	r3, r5
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	f8d8 3000 	ldr.w	r3, [r8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d038      	beq.n	800162a <_malloc_r+0xf6>
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	42a2      	cmp	r2, r4
 80015bc:	d12b      	bne.n	8001616 <_malloc_r+0xe2>
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	e00f      	b.n	80015e4 <_malloc_r+0xb0>
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	1b52      	subs	r2, r2, r5
 80015c8:	d41f      	bmi.n	800160a <_malloc_r+0xd6>
 80015ca:	2a0b      	cmp	r2, #11
 80015cc:	d917      	bls.n	80015fe <_malloc_r+0xca>
 80015ce:	1961      	adds	r1, r4, r5
 80015d0:	42a3      	cmp	r3, r4
 80015d2:	6025      	str	r5, [r4, #0]
 80015d4:	bf18      	it	ne
 80015d6:	6059      	strne	r1, [r3, #4]
 80015d8:	6863      	ldr	r3, [r4, #4]
 80015da:	bf08      	it	eq
 80015dc:	f8c8 1000 	streq.w	r1, [r8]
 80015e0:	5162      	str	r2, [r4, r5]
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	4638      	mov	r0, r7
 80015e6:	f104 060b 	add.w	r6, r4, #11
 80015ea:	f000 f829 	bl	8001640 <__malloc_unlock>
 80015ee:	f026 0607 	bic.w	r6, r6, #7
 80015f2:	1d23      	adds	r3, r4, #4
 80015f4:	1af2      	subs	r2, r6, r3
 80015f6:	d0ae      	beq.n	8001556 <_malloc_r+0x22>
 80015f8:	1b9b      	subs	r3, r3, r6
 80015fa:	50a3      	str	r3, [r4, r2]
 80015fc:	e7ab      	b.n	8001556 <_malloc_r+0x22>
 80015fe:	42a3      	cmp	r3, r4
 8001600:	6862      	ldr	r2, [r4, #4]
 8001602:	d1dd      	bne.n	80015c0 <_malloc_r+0x8c>
 8001604:	f8c8 2000 	str.w	r2, [r8]
 8001608:	e7ec      	b.n	80015e4 <_malloc_r+0xb0>
 800160a:	4623      	mov	r3, r4
 800160c:	6864      	ldr	r4, [r4, #4]
 800160e:	e7ac      	b.n	800156a <_malloc_r+0x36>
 8001610:	4634      	mov	r4, r6
 8001612:	6876      	ldr	r6, [r6, #4]
 8001614:	e7b4      	b.n	8001580 <_malloc_r+0x4c>
 8001616:	4613      	mov	r3, r2
 8001618:	e7cc      	b.n	80015b4 <_malloc_r+0x80>
 800161a:	230c      	movs	r3, #12
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4638      	mov	r0, r7
 8001620:	f000 f80e 	bl	8001640 <__malloc_unlock>
 8001624:	e797      	b.n	8001556 <_malloc_r+0x22>
 8001626:	6025      	str	r5, [r4, #0]
 8001628:	e7dc      	b.n	80015e4 <_malloc_r+0xb0>
 800162a:	605b      	str	r3, [r3, #4]
 800162c:	deff      	udf	#255	; 0xff
 800162e:	bf00      	nop
 8001630:	200000b8 	.word	0x200000b8

08001634 <__malloc_lock>:
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <__malloc_lock+0x8>)
 8001636:	f000 b84b 	b.w	80016d0 <__retarget_lock_acquire_recursive>
 800163a:	bf00      	nop
 800163c:	200001fc 	.word	0x200001fc

08001640 <__malloc_unlock>:
 8001640:	4801      	ldr	r0, [pc, #4]	; (8001648 <__malloc_unlock+0x8>)
 8001642:	f000 b846 	b.w	80016d2 <__retarget_lock_release_recursive>
 8001646:	bf00      	nop
 8001648:	200001fc 	.word	0x200001fc

0800164c <memset>:
 800164c:	4402      	add	r2, r0
 800164e:	4603      	mov	r3, r0
 8001650:	4293      	cmp	r3, r2
 8001652:	d100      	bne.n	8001656 <memset+0xa>
 8001654:	4770      	bx	lr
 8001656:	f803 1b01 	strb.w	r1, [r3], #1
 800165a:	e7f9      	b.n	8001650 <memset+0x4>

0800165c <_sbrk_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d06      	ldr	r5, [pc, #24]	; (8001678 <_sbrk_r+0x1c>)
 8001660:	2300      	movs	r3, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	f7ff fec6 	bl	80013f8 <_sbrk>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_sbrk_r+0x1a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_sbrk_r+0x1a>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	200001f8 	.word	0x200001f8

0800167c <__errno>:
 800167c:	4b01      	ldr	r3, [pc, #4]	; (8001684 <__errno+0x8>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000070 	.word	0x20000070

08001688 <__libc_init_array>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	4d0d      	ldr	r5, [pc, #52]	; (80016c0 <__libc_init_array+0x38>)
 800168c:	4c0d      	ldr	r4, [pc, #52]	; (80016c4 <__libc_init_array+0x3c>)
 800168e:	1b64      	subs	r4, r4, r5
 8001690:	10a4      	asrs	r4, r4, #2
 8001692:	2600      	movs	r6, #0
 8001694:	42a6      	cmp	r6, r4
 8001696:	d109      	bne.n	80016ac <__libc_init_array+0x24>
 8001698:	4d0b      	ldr	r5, [pc, #44]	; (80016c8 <__libc_init_array+0x40>)
 800169a:	4c0c      	ldr	r4, [pc, #48]	; (80016cc <__libc_init_array+0x44>)
 800169c:	f000 f81a 	bl	80016d4 <_init>
 80016a0:	1b64      	subs	r4, r4, r5
 80016a2:	10a4      	asrs	r4, r4, #2
 80016a4:	2600      	movs	r6, #0
 80016a6:	42a6      	cmp	r6, r4
 80016a8:	d105      	bne.n	80016b6 <__libc_init_array+0x2e>
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b0:	4798      	blx	r3
 80016b2:	3601      	adds	r6, #1
 80016b4:	e7ee      	b.n	8001694 <__libc_init_array+0xc>
 80016b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ba:	4798      	blx	r3
 80016bc:	3601      	adds	r6, #1
 80016be:	e7f2      	b.n	80016a6 <__libc_init_array+0x1e>
 80016c0:	0800172c 	.word	0x0800172c
 80016c4:	0800172c 	.word	0x0800172c
 80016c8:	0800172c 	.word	0x0800172c
 80016cc:	08001730 	.word	0x08001730

080016d0 <__retarget_lock_acquire_recursive>:
 80016d0:	4770      	bx	lr

080016d2 <__retarget_lock_release_recursive>:
 80016d2:	4770      	bx	lr

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
